"                     {/ ． ．\}
"                     ( (oo)   )
" +-------------oOOo---︶︶︶︶---oOOo-------------+
"                                      _  ___
"                                       \/ _/
"                                      _/ /ian__
"                                     /__/\ \/ /
"                                          \  /
"                                          /_/un
"
"
" @author 闲耘™ (@hotoo, mail@xianyun.org)
"               (http://www.xianyun.org/)
" @version 2009/09/10
"
" +---------------------------------Oooo-----------+
"

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin


set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" -------------------------------- Settings ----------------------------------
" quick startup mode.
set shortmess=atI

" encoding
set encoding=utf-8
set termencoding=utf-8
if has('win32')
    set fileencoding=chinese
else
    set fileencoding=utf-8
endif
"set fileencodings=ucs-bom,utf-8,chinese,latin-1
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set langmenu=zh_CN.utf-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_cn.utf-8

" FencView.vim
" 自动识别文件编码
" @see http://www.vim.org/scripts/script.php?script_id=1708
let g:fencview_autodetect=1
let g:fencview_auto_patterns='*.txt,*.js,*.css,*.c,*.cpp,*.h,*.java,*.cs,*.htm{l\=}'
let g:fencview_checklines=20
let $FENCVIEW_TELLENC='tellenc'


" max open window
au GUIEnter * simalt ~x
" theme, skin, color
colo desert
" @see http://blog.infinitered.com/entries/show/8
"colo ir_black
sy on


" @see :help mbyte-IME
if has('multi_byte_ime')
    highlight Cursor guibg=#F0E68C guifg=#708090
    highlight CursorIM guibg=Purple guifg=NONE
endif


" fonts
" @see http://support.microsoft.com/kb/306527/zh-cn
" @see http://www.gracecode.com/archives/1545/
" @see http://blog.xianyun.org/2009/09/14/vim-fonts.html
if has("win32")
    set guifont=Courier_New:h11:cANSI
    "set guifontwide=YouYuan:h11:cGB2312
endif


" swrap file, auto backup.
" :set backup
set nobackup

" tabs
set softtabstop=4
" replace tab to word space.
set expandtab
" show tab indent word space.
set tabstop=4
" tab length
set shiftwidth=4

" break full word.
set linebreak
" new line indent same this line.
set autoindent

" fold
set foldmethod=indent
set foldlevel=20
set fdc=4

" set ignorecase
set ic

" display line number.
" <code>:set nonu</code> hide line number.
set nu


" highlight CurrentLine guibg=darkgrey guifg=white
" au! Cursorhold * exe 'match CurrentLine /\%' . line('.') . 'l.*/'
" set ut=100


" auto wrap text.
" NOTE: this setting will change text source.
" set cursorline
" set textwidth=80
" set fo+=m
syn match out80 /\%80v./ containedin=ALL
hi out80 guifg=#333333 guibg=#ffffff


" share system clipboard.
"set clipboard+=unnamed


" User Defined Status Line.
set laststatus=2
set statusline=%t%m%r%h%w\ [%Y:%{toupper(&ff)}:%{toupper(&fenc!=''?&fenc:&enc)}]\ [ASCII:%b]\ [%l%1*/%L(%p%%)%*,%v]
hi User1 guibg=#C2BFA5 guifg=#888888
"hi User1 cterm=italic ctermfg=blue
"hi User2 cterm=bold



" ------------------------------- Mappings -----------------------------------
" Normal Mode, Visual Mode, and Select Mode,
" use <Tab> and <Shift-Tab> to indent
nmap <tab> v>
nmap <s-tab> v<
vmap <tab> >gv
vmap <s-tab> <gv


" use Meta key(Windows:Alt) to move cursor in insert mode.
" Note: if system install "Lingoes Translator",
"   you will need change/disabled hot key.
noremap! <M-j> <Down>
noremap! <M-k> <Up>
noremap! <M-h> <left>
noremap! <M-l> <Right>


" tab navigation & operation like tabs browser
" @see http://vimcdoc.sourceforge.net/doc/tabpage.html
" Note: cannot map <C-number> for gvim on window 7.
imap <C-t> <Esc>:tabnew<cr>
nmap <C-t> :tabnew<cr>
"imap <C-w> <Esc>:tabclose<cr>
"nmap <C-w> :tableclose<cr>
"imap <C-S-w> <Esc>:tabonly<cr>
"nmap <C-S-w> :tabonly<cr>
imap <C-tab> :tabnext<cr>
nmap <C-tab> :tabnext<cr>
imap <C-S-tab> :tabprevious<cr>
nmap <C-S-tab> :tabprevious<cr>
imap <M-1> <Esc>:tabfirst<cr>
nmap <M-1> :tabfirst<cr>
imap <M-2> <Esc>2gt
nmap <M-2> 2gt
imap <M-3> <Esc>3gt
nmap <M-3> 3gt
imap <M-4> <Esc>4gt
nmap <M-4> 4gt
imap <M-5> <Esc>5gt
nmap <M-5> 5gt
imap <M-6> <Esc>6gt
nmap <M-6> 6gt
imap <M-7> <Esc>7gt
nmap <M-7> 7gt
imap <M-8> <Esc>8gt
nmap <M-8> 8gt
imap <M-9> <Esc>9gt
nmap <M-9> 9gt
imap <M-0> <Esc>:tablast<cr>
nmap <M-0> :tablast<cr>


" auto complete drop list.
set completeopt=longest,menu
imap <C-L> <C-x><C-o>


" Toggle Menu and Toolbar
" @see http://liyanrui.is-programmer.com/articles/1791/gvim-menu-and-toolbar-toggle.html
set guioptions-=m
set guioptions-=T
map <silent> <F2> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
    \endif<CR>


" Dynamic bind <HOME> key
" if caret/cursor not at the frist non-white-space character
"   move caret/cursor to there
" else
"   move to beginning
function HomeBind(offset)
    let cursor=getpos('.')
    let s0=getline(line('.'))
    let s1=substitute(s0, "^\\s\\+", "", "")
    let x=len(s0)-len(s1)+1
    if col('.') == x-a:offset
        let x=1
    endif
    call setpos('.', [cursor[0], cursor[1], x, cursor[3]])
endfunction
imap <silent> <Home> <Esc>:call HomeBind(1)<cr>i
nmap <silent> <Home> :call HomeBind(0)<cr>
vmap <silent> <Home> <Esc>:call HomeBind(1)<cr>


" Dynamic bind <END> key
" if caret/cursor not at the end
"   move caret/cursor to there
" else
"   move to last non-white-space character.
function EndBind(offset)
    let cursor=getpos('.')
    let s0=getline(line('.'))
    let s1=substitute(s0, "\\s*$", "", "")
    let x=len(s0)+a:offset
    if col('.') == x
        let x=len(s1)+a:offset
    endif
    call setpos('.', [cursor[0], cursor[1], x, cursor[3]])
endfunction
imap <silent> <End> <Esc>:call EndBind(0)<cr>a
nmap <silent> <End> :call EndBind(0)<cr>
vmap <silent> <End> :call EndBind(0)<cr>
"nmap <End> /\S\s*$<CR>:nohl<CR>



" -------------------------------- Plugins -----------------------------------
" Auto Complete Pop Menu
" autocomplpop.vim
" @see http://www.vim.org/scripts/script.php?script_id=1879
" @see http://hi.baidu.com/timeless/blog/item/cb4478f09a1563ca7931aa5d.html
" Note: functions and key maps invalid.
"
"let g:AutoComplPop_IgnoreCaseOption=1
"let g:pumselect = 0
"
"inoremap <expr> <TAB>   MaySelect()
"function MaySelect()
"    if(pumvisible())
"        let g:pumselect = 1
"        return "\<DOWN>"
"    endif
"    return "\<TAB>"
"endfunc
"
"inoremap <expr> <Space> MayComplete()
"func MayComplete()
"    if (pumvisible() && g:pumselect)
"        let g:pumselect = 0
"        return "\<CR>"
"    endif
"    return "\<Space>"
"endfunc
"
"inoremap <expr> <CR> StateChangeEnter()
"func StateChangeEnter()
"    let g:pumselect = 0
"    return "\<CR>"
"endfunc


" Doxygen
" @see http://www.vim.org/scripts/script.php?script_id=5
" @see http://www.vim.org/scripts/script.php?script_id=987
" @see http://www.jeffhung.net/blog/articles/jeffhung/447/
" @see http://blog.csdn.net/AD_LI/archive/2009/08/24/4474878.aspx
let g:DoxygenToolkit_authorName="闲耘™ (@hotoo, mail@xianyun.org)"
let s:licenseTag = "Copyleft(C)\<enter>"
let s:licenseTag = s:licenseTag . "For 闲耘™\<enter>"
let s:licenseTag = s:licenseTag . "Some right reserved\<enter>"
let g:DoxygenToolkit_licenseTag = s:licenseTag
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1


" gvim full screen plugin
" @see http://www.vim.org/scripts/script.php?script_id=2596
" @see http://www.gracecode.com/archives/2946/
map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
imap <F11> <Esc><F11>a


" jsLint
" @see http://www.gracecode.com/category/496/
" @see http://www.vim.org/scripts/script.php?script_id=2578
let g:jslint_command = $VIM.'\vimfiles\jslint\jsl.exe'
"map <C-s><C-j> :call JsonLint()<cr>


" css color
" @see http://www.gracecode.com/archives/977/
" @see http://www.vim.org/scripts/script.php?script_id=2150


" Calendar
" @see http://www.gracecode.com/archives/674/
let g:calendar_diary=$VIM.'\vimfiles\calendar_data\'
map ca :Calendar<cr>


" NERDTree
" @see http://www.vim.org/scripts/script.php?script_id=1658
" @see http://www.gracecode.com/archives/1339/
imap <F3> :NERDTreeToggle<cr>
nmap <F3> :NERDTreeToggle<cr>


" for javascript.vim
" enable javascript fold
"let javascript_fold=1
" enable support dom, html and css for javascript
"let javascript_enable_domhtmlcss=1


" fold javascript function code.
" need ftpplugin/python_fold.vim
" @see http://amix.dk/blog/viewEntry/19132
" @see http://vim.sourceforge.net/scripts/script.php?script_id=515
" @see http://amix.dk/vim/vimrc.html
function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
        return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen


" ctags
let g:ctags_path=$VIM.'\vimfiles\plugin\ctags.exe'
let g:ctags_statusline=1
let g:ctags_args=1


" TagList
filetype on
let Tlist_Ctags_Cmd=$VIM.'\vimfiles\plugin\ctags.exe'
nnoremap <F12> :TlistToggle<CR>


" snipMate
" text+<TAB> to Auto Complete Code Fragments.
" @see http://www.vim.org/scripts/script.php?script_id=2540
" @see http://code.google.com/p/snipmate/
" @see http://vimeo.com/3535418
filetype plugin on
let snips_author="闲耘 (mail[AT]xianyun.org)"


" marks, will be auto load source
"source $VIM\vimfiles\plugin\mark.vim


" ------------------------------- File Types ---------------------------------
" css autocomplete
" csscomplete.vim
" @see VIM/vim72/autoload/csscomplete.vim
autocmd FileType css set omnifunc=csscomplete#CompleteCSS


" *.asx, windows media playlist.
"au BufRead *.asx,<&faf;XML> runtime! syntax/xml.vim
"au BufRead,BufNewFile *.asx setfiletype asx


" velocity.vim : Syntax file for velocity templates
" @see http://www.vim.org/scripts/script.php?script_id=541
" NOTE: $VIM.vim72/filetype.vim
"
"au BufRead *.vm,<&faf;HTML> runtime! syntax/html.vim
"au BufRead,BufNewFile *.vm setfiletype vm



" --------------------------- Macros & Functions -----------------------------
" Remove trailing whitespace when writing a buffer, but not for diff files.
" From: Vigil
" @see http://blog.bs2.to/post/EdwardLee/17961
function RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()


" get week day string in chinese.
function Week_cn()
    return "星期".strpart("日一二三四五六", strftime("%w")*3, 3)
endfunction


" Chinese Docs
"cp -R doc $VIM.'\vimfiles\doc\'


" map auto complete
"inoremap ( ()<esc>:let leavechar=")"<cr>i
"inoremap [ []<esc>:let leavechar="]"<cr>i
"inoremap { {<esc>o}<esc>:let leavechar="}"<cr>O
" inoremap { {}<esc>:let leavechar="}"<cr>i
"inoremap ' ''<esc>:let leavechar="'"<cr>i
"inoremap " ""<esc>:let leavechar='"'<cr>i
"au BufNewFile,BufRead *.\(vim\)\@! inoremap " ""<esc>:let leavechar='"'<cr>i
"au BufNewFile,BufRead *.\(txt\)\@! inoremap ' ''<esc>:let leavechar="'"<cr>i
"imap <m-l> <esc>:exec "normal f" . leavechar<cr>a
"imap <d-l> <esc>:exec "normal f" . leavechar<cr>
