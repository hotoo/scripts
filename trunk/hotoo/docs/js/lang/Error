http://www.cnblogs.com/jxhwei/archive/2006/12/07/585020.html
JavaScript中的try...catch和异常处理


在JavaScript可以使用try...catch来进行异常处理。例如：

try {
	foo.bar();
} catch (e) {
	alert(e.name + ": " + e.message);
}


目前我们可能得到的系统异常主要包含以下6种: 

EvalError: raised when an error occurs executing code in eval() 
RangeError: raised when a numeric variable or parameter is outside of its valid range 
ReferenceError: raised when de-referencing an invalid reference 
SyntaxError: raised when a syntax error occurs while parsing code in eval() 
TypeError: raised when a variable or parameter is not a valid type 
URIError: raised when encodeURI() or decodeURI() are passed invalid parameters 

上面的六种异常对象都继承自Error对象。他们都支持以下两种构造方法: 

new Error();new Error("异常信息");

手工抛出异常的方法如下：

try {
	throw new Error("Whoops!");
} catch (e) {
	alert(e.name + ": " + e.message);
}

如要判断异常信息的类型，可在catch中进行判断：
 

try {
	foo.bar();
} catch (e) {
	if (e instanceof EvalError) {
		alert(e.name + ":" + e.message);
	} else if (e instanceof RangeError) {
		alert(e.name + ": " + e.message);
	} 	// etc 
}


Error具有下面一些主要属性： 

description: 错误描述 (仅IE可用). 
fileName: 出错的文件名 (仅Mozilla可用). 
lineNumber: 出错的行数 (仅Mozilla可用). 
message: 错误信息 (在IE下同description) 
name: 错误类型. 
number: 错误代码 (仅IE可用). 
stack: 像Java中的Stack Trace一样的错误堆栈信息 (仅Mozilla可用). 

因此为了更好的了解错误信息我们可以将catch部分改为如下形式：

try {
	foo.bar();
} catch (e) {
	if (browserType != BROWSER_IE) {
		alert("name: " + e.name +
			"message: " + e.message +
			"lineNumber: " + e.lineNumber +
			"fileName: " + e.fileName +
			"stack: " + e.stack);
	} else {
		alert("name: " + e.name +
			"errorNumber: " + (e.number & 0xFFFF ) +
			"message: " + e.message");
	}
}

JavaScript中的throw命令事实上可以抛出任何对象，并且我们可以在catch接受到此对象。例如：

try {
	throw new Date(); // 抛出当前时间对象
} catch (e) {
	alert(e.toLocaleString());	// 使用本地格式显示当前时间
}
